{"version":3,"sources":["comps/Title.js","firebase/config.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Zoom.js","App.js","index.js"],"names":["Title","className","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useStorage","file","useState","progress","setProgress","error","setError","url","setUrl","useEffect","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","div","initial","width","animate","UploadForm","types","type","onChange","e","selected","target","files","includes","useFirestore","docs","setDocs","unsub","orderBy","onSnapshot","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","map","key","layout","whileHover","opacity","onClick","img","src","alt","transition","delay","Zoom","selectedImg","classList","contains","y","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.95f0d9ae.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>FotoGrid</h1>\n      <h2>Ur Fotos</h2>\n      <p>Your private photos, Accessible 24/7</p>\n    </div>\n  )\n}\n\nexport default Title;","\nimport firebase from \"firebase/app\";\nimport 'firebase/storage';\nimport 'firebase/firestore';\n\nvar firebaseConfig = {\n  apiKey: \"AIzaSyBpngPJObX8dO__rantT5B5GUiCIHD4NTo\",\n  authDomain: \"fotogrid-f721f.firebaseapp.com\",\n  databaseURL: \"https://fotogrid-f721f.firebaseio.com\",\n  projectId: \"fotogrid-f721f\",\n  storageBucket: \"fotogrid-f721f.appspot.com\",\n  messagingSenderId: \"144160098659\",\n  appId: \"1:144160098659:web:55d200b9ff630fbed96b56\",\n  measurementId: \"G-2YJ18LXKXS\"\n};\n\n  // Initialize Firebase\n  firebase.initializeApp(firebaseConfig);\n\nconst projectStorage = firebase.storage();\nconst projectFirestore = firebase.firestore();\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp();\n\nexport { projectStorage, projectFirestore, timestamp };\n  \n","import {useState, useEffect} from 'react';\nimport { projectStorage, projectFirestore, timestamp } from  '../firebase/config';\n\n\nconst useStorage = (file) => {\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n    \n    useEffect(() => {\n        //references\n        const storageRef = projectStorage.ref(file.name);\n        const collectionRef = projectFirestore.collection('images');\n\n\n\n        storageRef.put(file).on('stage_change', (snap) => {\n            let percentage = (snap.bytesTransferred /snap.totalBytes) * 100; //percentage of the upload\n            setProgress(percentage);\n        }, (err) => {\n            setError(err); \n        }, async () => {\n            const url = await storageRef.getDownloadURL();\n            const createdAt = timestamp;\n            collectionRef.add ({ url, createdAt })\n            setUrl(url);\n        })\n\n    }, [file]); \n    return { progress, url, error}\n}\n\nexport default useStorage;\n\n","import React, {useEffect} from 'react';\nimport { motion } from 'framer-motion';\nimport useStorage from '../hooks/useStorage';\n\n\nconst ProgressBar = ({ file, setFile}) => {\n    const { url, progress } = useStorage(file);\n\n    useEffect(() => { if(url) {setFile(null); }\n\n    }, [url, setFile] )\n\n    return (\n        <motion.div className=\"progress-bar\"\n            initial= {{width: 0}}\n            animate= {{width : progress + '%' }}\n        ></motion.div>\n    )\n    \n \n}\n\nexport default ProgressBar;","import React, {useState}  from 'react';\nimport ProgressBar from './ProgressBar';\n\n\n\nconst UploadForm = () => { \n    const [file, setFile] = useState(null);\n    const [error, setError] = useState(null);\n\n    const types = ['image/png', 'image/jpeg']; //set file type to only png and img\n\n    const changeHandler = (e) => {\n        let selected = e.target.files[0];\n        \n        //\n        if (selected && types.includes(selected.type)) {\n            setFile(selected);\n            setError('');\n        }\n        else {\n            setFile(null);\n            setError('Select an image file (png or jpeg)');\n        }\n    }\n\n    return (\n        <form>\n            <input type=\"file\" onChange={changeHandler} />\n            <div className =\"output\">\n                { error && <div className=\"error\"> { error } </div> }\n                { file && <div> {file.name} </div> }\n                { file && <ProgressBar file={file} setFile ={setFile} /> }\n            </div>\n        </form>\n    )\n}\nexport default UploadForm;","import {useState, useEffect} from 'react';\nimport { projectFirestore} from  '../firebase/config';\n\nconst useFirestore = (collection) => {\n    const [docs, setDocs] = useState([]);\n\n    useEffect(() => {\n        const unsub = projectFirestore.collection(collection)\n        .orderBy('createdAt', 'desc')\n        .onSnapshot((snap) => {\n            let documents = [];\n            snap.forEach(doc => {\n                documents.push({...doc.data(), id: doc.id})\n            });\n            setDocs(documents);    \n        });\n\n        return () => unsub();\n    }, [collection])\n\n    return { docs };\n}\n\nexport default useFirestore;","import  React from 'react';\nimport useFirestore from '../hooks/useFirestore';\nimport { motion } from 'framer-motion';\n\nconst ImageGrid = ({ setSelectedImg }) => {\n    const { docs } = useFirestore('images');\n\n    return (\n        <div className=\"img-grid\">\n            { docs && docs.map(doc => (\n                <motion.div className=\"img-wrap\" key={doc.id}\n                    layout\n                    whileHover={ {opacity : 1} }  //css styling has initial value of 0.8\n                    onClick={() => setSelectedImg(doc.url)}\n                >\n                 <motion.img src={doc.url} alt=\"uploaded imgs\"\n                        initial=    {{opacity: 0}}\n                        animate=    {{opacity: 1}} \n                        transition= {{delay: 1}}\n                 />\n                </motion.div>\n            ))}\n        </div>\n    )\n}\n\nexport default ImageGrid;\n","import React from 'react';\nimport { motion } from 'framer-motion';\n\n\nconst Zoom = ({ selectedImg, setSelectedImg }) => {\n\n    const handleClick = (e) => {\n        if (e.target.classList.contains('backdrop')) {\n          setSelectedImg(null);\n        }\n      }\n\n    return (\n        <motion.div className=\"backdrop\" onClick={handleClick}\n            initial= {{ opacity : 0 }}\n            animate= {{ opacity : 1 }}\n            >\n\n\n            <motion.img src={selectedImg} alt=\"enlarged pic\"\n              initial= {{y : \"-100vh\"}}\n              animate= {{y : 0}}\n            />\n        </motion.div>\n    )\n\n\n}\n\nexport default Zoom;","import React, {useState} from 'react';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\nimport ImageGrid from './comps/ImageGrid';\nimport Zoom from './comps/Zoom';\n\n\n\nfunction App() {\n\n  const [selectedImg, setSelectedImg] = useState(null);\n\n\n  return (\n    <div className=\"App\">\n      <Title />\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg} />\n      { selectedImg && <Zoom selectedImg={selectedImg} setSelectedImg={setSelectedImg} />}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}